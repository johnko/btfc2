#!/bin/sh
######################################################################
# LICENSE pulled in with, cat LICENSE | awk '{print "# "$0}'
######################################################################
# Copyright (c) 2015, John Ko
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
######################################################################
# Script version is yymmdd-HHMMSS in UTC, date +%y%m%d-%H%M%S
######################################################################
SCRIPTVERSION=150121-075208


########## Variables


BTFCMETA="~/.btfcmeta"
BTFCCACHE="~/.btfccache"
BTFCTMP="~/.btfctmp"


########## Functions


exiterror() {
  if [ "$1" != "0" ]; then
    echo "ERROR: $1 $2" >&2
  fi
  exit $1
}


getfullpath() {
  if [ -d "${PATH}" ]; then
    cd "${PATH}"
    FULLPATH=`pwd`
    cd -
    echo $FULLPATH
  else
    exiterror 1 "${PATH} is not a directory."
  fi
}


########## modified from \
# http://edwardslab.bmcb.georgetown.edu/software/bittorrent_for_clusters.html
validpid() {
  if [ -f "$1" ]; then
    ps `cat $1` >/dev/null 2>&1
    return $?
  else
    return 1
  fi
}


copy_path_to_cache() {
  if [ "$HARDLINK" = "-l" ]; then
    #hardcoded so we don't delete /
    if [ -d "~/.btfccache/${NAME}" ]; then
      rm -r "~/.btfccache/${NAME}" || exiterror 1 "Can't rm -r ~/.btfccache/${NAME}"
    fi
    install -d -m 700 "${BTFCCACHE}/${NAME}"
    cp -rl "${FULLPATH}" "${BTFCCACHE}/" || exiterror 1 "Can't cp -rl ${FULLPATH} ${BTFCCACHE}/"
    else
      exiterror 1 "Can't sha1 the path."
    fi
  else
    rsync -rq $RSYNCCHECK $1 "${FULLPATH}/" "${BTFCCACHE}/${NAME}/"
  fi
}

copy_to_fullpath() {
  # ...... if -p prune: try rsync --delete
  rsync -rq $RSYNCCHECK $RSYNCDELETE "${BTFCCACHE}/${NAME}/" "${FULLPATH}/"
}


make_torrent() { #TODO XXXXX
  # ...... rsync ~/folder/ ~/.btfccache/hash_of_pathname/folder/ (or if -l, rm -rf ~/.btfccache/hash_of_pathname/folder + cp -rl for speed)
  copy_path_to_cache --delete
  # ...... create ~/.btfctmp/folder.torrent file from ~/.btfccache/hash_of_pathname/folder
}


start_transmissioncli() { #TODO XXXXX
  # ...... run torrent client with metadata from ~/.btfcmeta/folder.torrent and saving data to ~/.btfccache/folder
  # ...... on complete: rsync with (-c default, -t speed) and with backup or save conflict copy to ~/btfc/folder
  copy_to_fullpath && STATUS="-S"
}


kill_transmissioncli() { #TODO XXXXX

}


prune_by_grep() { #TODO XXXXX
  if [ "$PRUNE" = "-p" ]; then
    # if grep file name not in .torrent, unlink the .btfccache/hash_of_pathname/folder/path/file
  fi
}


subscribe_using() {
  if [ "$1" = "copy" ]; then
    if [ "x" != "x${WATCH}" ]; then
      if [ -e "${WATCH}/${NAME}.torrent" ]; then
        cp "${WATCH}/${NAME}.torrent" "${BTFCTMP}/${NAME}.torrent"
      fi
    else
      exiterror 1 "-w is not specified."
    fi
  fi
}


publish_using() {
  if [ "$1" = "copy" ]; then
    cp "${BTFCMETA}/${NAME}.torrent" "${WATCH}/${NAME}.torrent"
  elif [ "$1" = "copy-git-add-commit" ]; then
    cp "${BTFCMETA}/${NAME}.torrent" "${WATCH}/${NAME}.torrent"
    cd "${WATCH}"
    git add "${NAME}.torrent"
    git commit -m "updated ${NAME}.torrent"
    cd -
  fi
}


leech() {
  # ...... stop client
  kill_transmissioncli
  # ...... if seeding but .torrent different then
  if [ "$STATUS" = "-S" ]; then
    # ........ rsync ~/folder/ ~/.btfccache/hash_of_pathname/folder/ (or if -l, rm -rf ~/.btfccache/hash_of_pathname/folder + cp -rl for speed)
    copy_path_to_cache
    # ...... fi
  fi
  mv "${BTFCTMP}/${NAME}.torrent" "${BTFCMETA}/${NAME}.torrent"
  # ...... if -p prune: try if grep file name not in .torrent, unlink the .btfccache/hash_of_pathname/folder/path/file
  [ "$PRUNE" = "-p" ] && prune_by_grep
  start_transmissioncli
}

while getopts w:d:N:P:t:icslpSLvh o; do
  case "$o" in
    w) WATCH="${OPTARG}" ;;
    d) PATH="${OPTARG}" ;;
    N) NAME="${OPTARG}" ;;
    P) PORT="${OPTARG}" ;;
    t) WAITSECONDS="${OPTARG}" ;;
    i) ACTION="init" ;;
    c) ACTION="clone" ;;
    s) ACTION="status" ;;
    l) HARDLINK="-l" ;;
    p) PRUNE="-p" ;;
    S) STATUS="-S" ;; #seeding
    L) STATUS="-L" ;; #leeching
    v) echo "$SCRIPTVERSION" ; exit 1 ;;
    h) usage ; exit 1 ;;
    [?]) usage ; exit 1 ;;
  esac
done


########## default variable settings if not found
if [ "x" = "x${WATCH}" ]; then
  WATCH="~/gitsync"
fi
if [ "x" = "x${PATH}" ]; then
  PATH="~/btfc"
fi
PORT=`echo $PORT | grep -o '[0-9]*'`
if [ "x" = "x${PORT}" ]; then
  PORT="51413"
fi
WAITSECONDS=`echo $WAITSECONDS | grep -o '[0-9]*'`
if [ "x" = "x${WAITSECONDS}" ]; then
  WAITSECONDS="60"
fi
if [ "x" = "x${ACTION}" ]; then
  exiterror 1 "Required -i or -c."
fi
if [ "x" = "x${STATUS}" ]; then
  STATUS="-L"
fi
[ "$PRUNE" = "-p" ] && RSYNCDELETE="--delete"
RSYNCCHECK="-c"
[ "$HARDLINK" = "-l" ] && RSYNCCHECK="-t"
FULLPATH=`getfullpath`
if [ "x" = "x${FULLPATH}" ]; then
  exiterror 1 "Can't pwd in the path."
fi
NAME=`echo $NAME | grep -o '[a-zA-Z0-9]' | tr -d '\n'`
if [ "x" = "x${NAME}" ]; then
  NAME=`echo ${FULLPATH##*/} | grep -o '[a-zA-Z0-9]' | tr -d '\n'`
fi
if [ "x" = "x${PUBLISH}" ]; then
  PUBLISH="copy-git-add-commit"
fi
if [ "x" = "x${SUBSCRIBE}" ]; then
  SUBSCRIBE="copy"
fi


if [ "$ACTION" = "init" ]; then
# PSEUDO CODE
#
# btfc -i [-l] [-p] [-d directory] [-P PORT] [-s seconds]
# .. -i init
# .. rsync copy as default because safer, but we can specify -l for hardlink optional speed and save space
# .. -p for prune
# .. -d folder, like ~/btfc
# .. -P for TCP/IP port
# .. -s for INTERVAL in seconds
# .. if client not running
     if ! validpid ${NAME} ; then
# .... if ! diff -r ~/.btfccache/hash_of_pathname/folder ~/folder (different)
       install -d -m 700 "${BTFCCACHE}/${NAME}"
       if ! diff -r -q "${FULLPATH}/" "${BTFCCACHE}/${NAME}/" ; then
         make_torrent
# .... fi
       fi
# .... if ~/.btfcmeta/folder.torrent not exist
       if [ ! -e "${BTFCMETA}/${NAME}.torrent" ]; then
         make_torrent
# .... fi
       fi
# .... PUBLISH (using the copy+git commit strategy) from ~/.btfctmp/folder.torrent to ~/gitsync (in gtfc if gitsync exists)
       publish_using ${PUBLISH}
       STATUS="-S"
# .. fi
     fi
# .. run btfc -c [-l] [-p] [-d source_directory] [-P PORT] [-s seconds]
     ${0} -c $HARDLINK $PRUNE -d $FULLPATH -N $NAME -P $PORT -t $WAITSECONDS -w $WATCH $STATUS &
#
elif [ "$ACTION" = "clone" ]; then
# btfc -c [-l] [-p] [-d directory] [-P PORT] [-s seconds]
# .. -c means clone
# .. SUBSCRIBE (using copy strategy) from ~/gitsync to ~/.btfctmp/folder.torrent
     subscribe_using ${SUBSCRIBE}
# .. if ! diff ~/.btfctmp/folder.torrent ~/.btfcmeta/folder.torrent (different)
     if   [ -e "${BTFCTMP}/${NAME}.torrent" ] && [ ! -e "${BTFCMETA}/${NAME}.torrent" ]; then
       leech
     elif [ -e "${BTFCTMP}/${NAME}.torrent" ] && [   -e "${BTFCMETA}/${NAME}.torrent" ]; then
       if ! diff -q "${BTFCTMP}/${NAME}.torrent" "${BTFCMETA}/${NAME}.torrent" ; then
         leech
# .... fi
       fi
     fi
# .. if ! diff -r ~/.btfccache/hash_of_pathname/folder ~/folder (different)
     install -d -m 700 "${BTFCCACHE}/${NAME}"
     if ! diff -r -q "${FULLPATH}/" "${BTFCCACHE}/${NAME}/" ; then
# .... stop client
       kill_transmissioncli
# .. else
     else
# .... sleep for INTERVAL seconds
       sleep $WAITSECONDS
# .. fi
     fi
# .. run btfc -i [-l] [-p] [-d save_directory] [-P PORT] [-s seconds]
     ${0} -i $HARDLINK $PRUNE -d ${FULLPATH%/*} -N $NAME -P $PORT -t $WAITSECONDS -w $WATCH $STATUS &
elif [ "$ACTION" = "status" ]; then
else
  exit 1
fi
